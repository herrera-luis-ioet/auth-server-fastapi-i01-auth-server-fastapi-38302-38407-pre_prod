apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "auth-service.fullname" . }}
  labels:
    {{- include "auth-service.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "auth-service.selectorLabels" . | nindent 6 }}
  strategy:
    type: {{ .Values.strategy.type }}
    {{- if eq .Values.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.strategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.strategy.rollingUpdate.maxUnavailable }}
    {{- end }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "auth-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            - name: POSTGRES_SERVER
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMap.name }}
                  key: POSTGRES_SERVER
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMap.name }}
                  key: POSTGRES_PORT
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMap.name }}
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: POSTGRES_PASSWORD
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: SECRET_KEY
            - name: ACCESS_TOKEN_EXPIRE_MINUTES
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMap.name }}
                  key: ACCESS_TOKEN_EXPIRE_MINUTES
            - name: REFRESH_TOKEN_EXPIRE_DAYS
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMap.name }}
                  key: REFRESH_TOKEN_EXPIRE_DAYS
            - name: BACKEND_CORS_ORIGINS
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMap.name }}
                  key: BACKEND_CORS_ORIGINS
            - name: SMTP_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMap.name }}
                  key: SMTP_HOST
                  optional: true
            - name: SMTP_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMap.name }}
                  key: SMTP_PORT
                  optional: true
            - name: SMTP_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: SMTP_USER
                  optional: true
            - name: SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: SMTP_PASSWORD
                  optional: true
            - name: EMAILS_FROM_EMAIL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMap.name }}
                  key: EMAILS_FROM_EMAIL
                  optional: true
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: {{ .Values.probes.readiness.port }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.probes.liveness.port }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      terminationGracePeriodSeconds: 30
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}