# Default values for auth-service
# This is a YAML-formatted file.

replicaCount: 3

image:
  repository: auth-server-fastapi
  tag: latest
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000

securityContext: {}

service:
  type: ClusterIP
  port: 80
  targetPort: 8000
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8000"

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: auth.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: auth-tls
  #    hosts:
  #      - auth.example.com

nodeSelector: {}

tolerations: []

affinity: {}

# Network policy configuration
networkPolicy:
  enabled: false
  allowExternal: true
  ingressNamespaceSelector: {}
  externalCIDRs: []

# Application specific configuration
application:
  # API settings
  apiV1Str: "/api/v1"
  projectName: "Authentication Management Component"
  
  # Database settings
  database:
    server: "postgres-service"
    port: "5432"
    name: "auth_db"
    # Credentials should be provided through secrets
  
  # Token settings
  token:
    accessTokenExpireMinutes: 30
    refreshTokenExpireDays: 7
    algorithm: "HS256"
  
  # CORS settings
  corsOrigins: '["https://app.example.com", "https://api.example.com"]'
  
  # Email settings
  email:
    smtpTls: true
    smtpPort: "587"
    smtpHost: "smtp.example.com"
    fromEmail: "noreply@example.com"
    fromName: "Authentication Service"
  
  # Rate limiting
  rateLimitPerMinute: 60

# Deployment strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Probes configuration
probes:
  readiness:
    path: /health
    port: http
    initialDelaySeconds: 10
    periodSeconds: 30
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  liveness:
    path: /health
    port: http
    initialDelaySeconds: 30
    periodSeconds: 60
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 3

# ConfigMap and Secret names
configMap:
  name: auth-server-config

secret:
  name: auth-server-secrets

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    username: postgres
    password: postgres
    database: auth_db
  service:
    port: 5432
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 8Gi
  
# Application secrets (should be overridden in production)
application:
  secretKey: "supersecretkey1234567890abcdefghijklmnopqrstuvwxyz"
  firstSuperuser: "admin@example.com"
  firstSuperuserPassword: "admin123"
  email:
    smtpUser: "noreply@example.com"
    smtpPassword: "examplepassword"
